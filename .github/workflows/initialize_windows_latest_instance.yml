name: Windows
on:
  workflow_dispatch:
    inputs:
      IDENTIFIER:
        description: 'Input an identifier:'
        required: true
        default: 'windows'
        type: string
      USE_N2N:
        description: 'Use N2N edge to connect'
        required: true
        default: true
        type: boolean
      N2N_IP:
        description: 'Specify the tap ip address for N2N edge'
        required: false
        default: '172.16.40.201'
        type: string
      USE_FRP:
        description: 'Use FRPC to connect'
        required: true
        default: false
        type: boolean
      FRP_SSH_PORT:
        description: 'Specify the remote SSH port (forwarding)'
        required: false
        default: '20022'
        type: string
      FRP_RDP_PORT:
        description: 'Specify the remote RDP port (forwarding)'
        required: false
        default: '23389'
        type: string
      SSH_PUBKEY:
        description: 'Use persoanl SSH public key'
        required: false
        default: true
        type: boolean
      SSH_HOST_KEY:
        description: 'Use static SSH host key'
        required: false
        default: true
        type: boolean
jobs:
  init:
    name: Initialize Windows-Latest Instance
    runs-on: windows-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Turn off firewall
        run: |
          netsh advfirewall set allprofiles state off
      - name: Remove password complexity requirements
        run: |
          secedit /export /cfg c:\secpol.cfg
          (gc C:\secpol.cfg).replace("PasswordComplexity = 1", "PasswordComplexity = 0") | Out-File C:\secpol.cfg
          secedit /configure /db c:\windows\security\local.sdb /cfg c:\secpol.cfg /areas SECURITYPOLICY
          rm -force c:\secpol.cfg -confirm:$false
      - name: Allow users with blank passwords to log in remotely
        run: |
          Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name LimitBlankPasswordUse -Value 0 -Force
      - name: Install OpenSSH server
        run: |
          Expand-Archive -Path .\windows\ssh\OpenSSH-Win64.zip -DestinationPath .\windows\ssh
          cd .\windows\ssh\OpenSSH-Win64\
          powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1
      - name: Configure sshd service and set credentials for root
        run: |
          net user root /add
          net localgroup Administrators root /add
          Copy-Item ".\windows\ssh\sshd_config" -Destination "C:\ProgramData\ssh\"
          New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force
          net start sshd
      - name: Set SSH public key
        if: ${{ inputs.SSH_PUBKEY }}
        env:
          SSH_PUBKEY: ${{ secrets.SSH_PUBKEY }}
        run: |
          echo ${env:SSH_PUBKEY} > "C:\ProgramData\ssh\administrators_authorized_keys"
          icacls.exe "C:\ProgramData\ssh\administrators_authorized_keys" /inheritance:r /grant "Administrators:F" /grant "SYSTEM:F"
      - name: Set SSH host key
        if: ${{ inputs.SSH_HOST_KEY }}
        run: |
          Del C:\ProgramData\ssh\ssh_host_*
          Copy-Item ".\windows\ssh\ssh_host_ecdsa_key" -Destination "C:\ProgramData\ssh\"
          icacls.exe "C:\ProgramData\ssh\ssh_host_ecdsa_key" /inheritance:r /grant "Administrators:F" /grant "SYSTEM:F"
          Copy-Item ".\windows\ssh\ssh_host_ecdsa_key.pub" -Destination "C:\ProgramData\ssh\"
          icacls.exe "C:\ProgramData\ssh\ssh_host_ecdsa_key.pub" /inheritance:r /grant "Administrators:F" /grant "SYSTEM:F"
      - name: Install TAP Windows Adapter V9
        if: ${{ inputs.USE_N2N }}
        run: |
          cd .\windows\n2n\tap_amd64
          .\tapinstall.exe install OemVista.inf tap0901
      - name: Install N2N service
        if: ${{ inputs.USE_N2N }}
        run: |
          New-Item "C:\n2n" -type directory
          Copy-Item ".\windows\n2n\edge.exe" -Destination "C:\n2n\"
          .\windows\daemon\winsw.exe install .\windows\n2n\edge.xml
      - name: Configure N2N
        if: ${{ inputs.USE_N2N }}
        env:
          N2N_SUPERNODE_HOST: ${{ secrets.N2N_SUPERNODE_HOST }}
          N2N_SUPERNODE_PORT: ${{ secrets.N2N_SUPERNODE_PORT }}
          N2N_COMMUNITY: ${{ secrets.N2N_COMMUNITY }}
          N2N_KEY: ${{ secrets.N2N_KEY }}
          N2N_IP: ${{ inputs.N2N_IP }}
          IDENTIFIER: ${{ inputs.IDENTIFIER }}
          N2N_CONF_FILE: .\windows\n2n\edge.conf
        run: |
          echo "-c=${env:N2N_COMMUNITY}" > ${env:N2N_CONF_FILE}
          echo "-I=${env:IDENTIFIER}-${env:N2N_IP}" >> ${env:N2N_CONF_FILE}
          echo "-l=${env:N2N_SUPERNODE_HOST}:${env:N2N_SUPERNODE_PORT}" >> ${env:N2N_CONF_FILE}
          echo "-a=${env:N2N_IP}" >> ${env:N2N_CONF_FILE}
          echo "-k=${env:N2N_KEY}" >> ${env:N2N_CONF_FILE}
          echo "-A3" >> ${env:N2N_CONF_FILE}
          Copy-Item "${env:N2N_CONF_FILE}" -Destination "C:\n2n\"
      - name: Launch N2N
        if: ${{ inputs.USE_N2N }}
        run: |
          net start edge
      - name: Install FRPC service
        if: ${{ inputs.USE_FRP }}
        run: |
          New-Item "C:\frp" -type directory
          Copy-Item ".\windows\frp\frpc.exe" -Destination "C:\frp\"
          .\windows\daemon\winsw.exe install .\windows\frp\frpc.xml
      - name: Configure FRPC
        if: ${{ inputs.USE_FRP }}
        env:
          FRP_SERVER_ADDR: ${{ secrets.FRP_SERVER_ADDR }}
          FRP_SERVER_PORT: ${{ secrets.FRP_SERVER_PORT }}
          FRP_TOKEN: ${{ secrets.FRP_TOKEN }}
          FRP_SSH_PORT: ${{ inputs.FRP_SSH_PORT }}
          FRP_RDP_PORT: ${{ inputs.FRP_RDP_PORT }}
          IDENTIFIER: ${{ inputs.IDENTIFIER }}
          FRP_CONF_FILE: .\windows\frp\frpc.ini
        run: | 
          echo "[common]" > ${env:FRP_CONF_FILE}
          echo "server_addr = ${env:FRP_SERVER_ADDR}" >> ${env:FRP_CONF_FILE}
          echo "server_port = ${env:FRP_SERVER_PORT}" >> ${env:FRP_CONF_FILE}
          echo "authentication_method = token" >> ${env:FRP_CONF_FILE}
          echo "token = ${env:FRP_TOKEN}" >> ${env:FRP_CONF_FILE}
          echo "[ssh-${env:FRP_SSH_PORT}-${env:IDENTIFIER}]" >> ${env:FRP_CONF_FILE}
          echo "type = tcp" >> ${env:FRP_CONF_FILE}
          echo "local_ip = 127.0.0.1" >> ${env:FRP_CONF_FILE}
          echo "local_port = 22" >> ${env:FRP_CONF_FILE}
          echo "remote_port = ${env:FRP_SSH_PORT}" >> ${env:FRP_CONF_FILE}
          echo "[rdp-${env:FRP_RDP_PORT}-${env:IDENTIFIER}]" >> ${env:FRP_CONF_FILE}
          echo "type = tcp" >> ${env:FRP_CONF_FILE}
          echo "local_ip = 127.0.0.1" >> ${env:FRP_CONF_FILE}
          echo "local_port = 3389" >> ${env:FRP_CONF_FILE}
          echo "remote_port = ${env:FRP_RDP_PORT}" >> ${env:FRP_CONF_FILE}
          Copy-Item "${env:FRP_CONF_FILE}" -Destination "C:\frp\"
      - name: Launch FRPC
        if: ${{ inputs.USE_FRP }}
        run: |
          net start frpc
      - name: Prepare the self-destruct trigger
        run: |
          Copy-Item ".\windows\daemon\maintain.bat" -Destination "D:\"
          New-Item "D:\remove_me_for_self_destruct" -type file
          Copy-Item ".\windows\daemon\self_destruct.bat" -Destination "D:\"
          Copy-Item ".\windows\daemon\regret.bat" -Destination "D:\"
          echo "=============================================================="
          echo "Run this command to terminate after at most 1 minute:"
          echo "---------------------------------------------------------"
          echo "D:\self_destruct.bat"
          echo "=============================================================="
          echo "=============================================================="
          echo "Run this command if you regret within 1 minute:"
          echo "---------------------------------------------------------"
          echo "D:\regret.bat"
          echo "=============================================================="  
      - name: Maintaining
        run: |
          D:\maintain.bat
